
                  Coding Standard


	            1. Purpose

This document is designed to define the coding standard used inside this kernel.
It will tell you how to name files, functions, variables, etc. as well as define
what may be used and where.



                   2. C coding style - brackets

All curley brackets in C should be on their own lines. This includes
if-statements, function-statements, else-statements, etc.
Functions must be defined like the following:

	typename_t function(arguments...)
	{
		...
		operations
		...
	}

Don't put multiple statements on a single line unless you have
something to hide:

	if (condition) do_this;
	  do_something_everytime;
	  
Do not unnecessarily use braces where a single statement will do.

	if (condition)
		action();

and

	if (condition)
		do_this();
	else
		do_that();

Multi-line if-statements which require brackets shall follow the same bracket standard
as function declarations:

	if (condition)
	{
		...
		operations
		...
	}
	else if (another condition)
	{
		...
		operations
		...
	}
	else
	{
		...
		operations
		...
	}
	
Note that the two may be mixed, so the following is allowed to happen:

	if (condition)
	{
		...
		operations
		...
	}
	else if (another condition)
		operation...
	else
	{
		...
		operations
		...
	}
	
This includes all keywords and functions in the C language except
a few corner cases (such as do-while):

	do
	{
	
	} while (operation);
	
Initialzer lists are defined a as follows:

unsigned char variable[] = {
	...,
	things,
	...,
};
	
These are examples of what NOT to do:

	if (condition) {
		operation;
	} else {
		...
		operations
		...
	}
	
	do {
		blah;
		argh;
	}
	while(true);
	
	while (derp) {
		things;
	}
	
	

                   3. C coding style - Spacing

Spacing is defined quite differently in this project than many others.
Spacing is strictly followed because many blocks of code can become
cumbersome to read if they're not spaced apart properly.

Tabs are defined as 8 spaces. If the code is too large to fit on the
screen then the code has become too complex and should be refactored.
All code should fit in 127 character rows.

Get a decent editor and don't leave whitespace at the end of lines.

Function declarations should NOT have a space between the parentheses
and the function name. Example:

	void MyFunction(char argument1, int argument2)
	
Example of what NOT to do:

	void MyFunction (char argument1, int argument2)
	

Use a space after these keywords:
	if, switch, case, for, do, while
	
but not with sizeof, typeof, alignof, or __attribute__.  E.g.,
	s = sizeof(struct file);


Do not add spaces around (inside) parenthesized expressions.  This example is
*bad*:

	s = sizeof( struct file );



When declaring pointer data or a function that returns a pointer type, the
preferred use of '*' is adjacent to the data name or function name and not
adjacent to the type name.  Examples:

	char *linux_banner;
	unsigned long long memparse(char *ptr, char **retptr);
	char *match_strdup(substring_t *s);

Use one space around (on each side of) most binary and ternary operators,
such as any of these:

	=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  : +  -

but no space after unary operators:
	&  *  ~  !  sizeof  typeof  alignof  __attribute__  defined

no space before the postfix increment & decrement unary operators:
	++  --

no space after the prefix increment & decrement unary operators:
	++  --

and no space around the '.' and "->" structure member operators.


Optionally, if a multiple assignment operation is happening in a single block, do try
and align the assignment operators, an exception to this is if the line is too long.
Example (taken from above):

	hole_header->magic    = HEAP_MAGIC;
	hole_header->is_hole  = true;
	hole_header->size     = orig_hole_size - new_size;

instead of:

	hole_header->magic = HEAP_MAGIC;
	hole_header->is_hole = true;
	hole_header->size = orig_hole_size - new_size;


The general convention is that space is your friend and having a lot of it makes for easier
to read code. If you feel that your functions are getting too lengthy and spread out, then
you should probably try to refactor your code to be a set of more managable functions.

Try not to compact blocks of code into unreadable blobs of text. Almost all if-statements,
while-statements, etc. should have a space before and after the statement. This breaks the
statement away from any initialized variables or function calls used in the function. The
(usual) only exception to this is when a variable is initialized for the statement.
An example:

	void FreeFrame(page_t *page)
	{
		uint32_t frame;
		if (!(frame = page->frame))
			return; // The given page didn't actually have an allocated frame!
		ClearFrame(frame); // Frame is now free again.
		page->frame = 0x0; // Page now doesn't have a frame.
	}

May be typed as above and be accepted, but it really should look like this:

	void FreeFrame(page_t *page)
	{
		uint32_t frame;
		
		if (!(frame = page->frame))
			return; // The given page didn't actually have an allocated frame!
			
		ClearFrame(frame); // Frame is now free again.
		page->frame = 0x0; // Page now doesn't have a frame.
	}

Here you can see that the if statement is 'floating' from the rest of the code in the function scope.
This is much easier to read and understand the function quickly without having to decouple the code
from the variable declarations and function calls. Another example:

	if (orig_hole_size - new_size > 0)
	{
		header_t *hole_header = (header_t *)(orig_hole_pos + sizeof(header_t) + size + sizeof(footer_t));
		hole_header->magic    = HEAP_MAGIC;
		hole_header->is_hole  = true;
		hole_header->size     = orig_hole_size - new_size;
		footer_t *hole_footer = (footer_t *)((uint32_t)hole_header + orig_hole_size - new_size - sizeof(footer_t));
		if ((uint32_t)hole_footer < heap->end_address)
		{
			hole_footer->magic = HEAP_MAGIC;
			hole_footer->header = hole_header;
		}
		
		// Put the new hole in the index;
		InsertOrderedArray((void*)hole_header, &heap->index);
	}
	
This is difficult to see what is what, lets break it up a bit:

	if (orig_hole_size - new_size > 0)
	{
		header_t *hole_header = (header_t *)(orig_hole_pos + sizeof(header_t) + size + sizeof(footer_t));
		
		hole_header->magic    = HEAP_MAGIC;
		hole_header->is_hole  = true;
		hole_header->size     = orig_hole_size - new_size;
		
		footer_t *hole_footer = (footer_t *)((uint32_t)hole_header + orig_hole_size - new_size - sizeof(footer_t));
		if ((uint32_t)hole_footer < heap->end_address)
		{
			hole_footer->magic = HEAP_MAGIC;
			hole_footer->header = hole_header;
		}
		
		// Put the new hole in the index;
		InsertOrderedArray((void*)hole_header, &heap->index);
	}
	
Here we see that the hole_footer variable is defined just above the if-statement because it's used
exclusively inside the if-statement and could possibly be used outside the statement. This is also
to separate it from the hole_header structure which is being filled out and could be easily misinterpreted
as part of that filling-out process instead of being a separate variable.




                   4. C coding style - Function and Variable Naming
                   
All function names shall be in Pascal case. See: http://c2.com/cgi/wiki?PascalCase

Pascal case is defined as the first letter of a word in the function name shall be
uppercase, and the remaining letters shall be lower case. Any single-letter word shall
be upper case (such as 'A' as in "I have A"). Any acronyms shall also be all uppercase.
An example:

	void InitializePIT(void);
	
	void VGAWriteNString(char *str, size_t sz);

Function names should be descriptive (e.g, Daemonize(), WritePID(), HandleArguments())
do not shorten function names to text-speak like english (e.g, HdlArgs() or DelSocks())
these are not descriptive and become cumbersome to read (Existing acronyms are acceptable
however). Function names should not contain underscores or other unsightly characters,
the libc uses enough bad function names, lets not extend that into the program.
No function shall EVER use Camal case, your code WILL BE REJECTED if it uses Camal case.
It is ugly and I hate it and it should die in a fire.

Variable names may be named in whatever way you wish to name them, just be sure to explain
them well unless they are self-explanatory.

Structures and typedefs may be used but structures which are typedef'ed must end in the
suffix '_s' and their typedef type must end in '_t'. This allows for easy searching of what
that type is using a tool such as grep.





                   5. C coding style - Macros
                   
Any multi-level macro shall have a space between the macro's '#' and the macro operation,
space levels depend on how deep into the macro scope said macro is. An example:

#ifndef HAVE_SOME_FUNC
# ifdef __CLANG__
#  define SomeFunc ClangSomeFunc
# else
#  define SomeFunc GCCSomeFunc
# endif // __CLANG__
#endif // HAVE_SOME_FUNC

This makes it MUCH easier to read macro scopes and know where a scope ends and begins.
Having all the '#' characters at the beginning also makes it a bit difficult to read
(as humans, we read words, not symbols).

Names of macros defining constants and labels in enums are capitalized.

	#define CONSTANT 0x12345

Enums are preferred when defining several related constants.

CAPITALIZED macro names are appreciated but macros resembling functions
may be named in lower case.

Generally, inline functions are preferable to macros resembling functions.

Macros with multiple statements should be enclosed in a do - while block:

#define macrofun(a, b, c) 			\
	do {					\
		if (a == 5)			\
			do_this(b, c);		\
	} while (0)

Things to avoid when using macros:

1) macros that affect control flow:

#define FOO(x)					\
	do {					\
		if (blah(x) < 0)		\
			return -EBUGGERED;	\
	} while(0)

is a _very_ bad idea.  It looks like a function call but exits the "calling"
function; don't break the internal parsers of those who will read the code.

2) macros that depend on having a local variable with a magic name:

	#define FOO(val) bar(index, val)

might look like a good thing, but it's confusing as hell when one reads the
code and it's prone to breakage from seemingly innocent changes.

3) macros with arguments that are used as l-values: FOO(x) = y; will
bite you if somebody e.g. turns FOO into an inline function.

4) forgetting about precedence: macros defining constants using expressions
must enclose the expression in parentheses. Beware of similar issues with
macros using parameters.

	#define CONSTANT 0x4000
	#define CONSTEXP (CONSTANT | 3)

	     
		7. C coding style - Editor modelines and other cruft

Some editors can interpret configuration information embedded in source files,
indicated with special markers.  For example, emacs interprets lines marked
like this:

-*- mode: c -*-

Or like this:

/*
Local Variables:
compile-command: "gcc -DMAGIC_DEBUG_FLAG foo.c"
End:
*/

Vim interprets markers that look like this:

/* vim:set sw=8 noet */

Do not include any of these in source files.  People have their own personal
editor configurations, and your source files should not override them.  This
includes markers for indentation and mode configuration.  People may use their
own custom mode, or may have some other magic method for making indentation
work correctly.



		8. C coding style - The inline disease

There appears to be a common misperception that gcc has a magic "make me
faster" speedup option called "inline". While the use of inlines can be
appropriate (for example as a means of replacing macros), it
very often is not. Abundant use of the inline keyword leads to a much bigger
kernel, which in turn slows the system as a whole down, due to a bigger
icache footprint for the CPU and simply because there is less memory
available for the pagecache. Just think about it; a pagecache miss causes a
disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles
that can go into these 5 milliseconds.

A reasonable rule of thumb is to not put inline at functions that have more
than 3 lines of code in them. An exception to this rule are the cases where
a parameter is known to be a compiletime constant, and as a result of this
constantness you *know* the compiler will be able to optimize most of your
function away at compile time.

Often people argue that adding inline to functions that are static and used
only once is always a win since there is no space tradeoff. While this is
technically correct, gcc is capable of inlining these automatically without
help, and the maintenance issue of removing the inline when a second user
appears outweighs the potential value of the hint that tells gcc to do
something it would have done anyway.
